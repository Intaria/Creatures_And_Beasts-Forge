buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url  = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://repo.spongepowered.org/maven/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered',                   name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.matthewprenger.cursegradle'

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

version = '1.5.4'
group = 'com.cgessinger.creaturesandbeasts' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "CNB-1.19"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.19'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            arg '-mixin.config=creatures-and-beasts.mixins.json'

            mods {
                cnb {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            arg '-mixin.config=creatures-and-beasts.mixins.json'

            mods {
                cnb {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'cnb', '--all', '--output', file('src/generated/resources/')

            mods {
                cnb {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, 'creatures-and-beasts.refmap.json'
}

configurations {
    packIntoJar {
        // If set to false, any dependencies will not be packed into the jar.
        transitive = false
    }
}

shadowJar {
    classifier ''
    configurations = [project.configurations.packIntoJar]
    // This is done to avoid any duplicate package issues.
    relocate 'org.infernalstudios.config', 'com.cgessinger.creaturesandbeasts.config.library'
}

reobf {
    shadowJar {}
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven/' }
    maven { url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url = 'https://maven.infernalstudios.org/releases' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    // Geckolib for ingame animations
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19:3.1.39')

    implementation 'org.infernalstudios:config:3.0.3'
    packIntoJar 'org.infernalstudios:config:3.0.3'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "cnb",
            "Specification-Vendor": "bonsaistudios",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "cnb",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"bonsaistudios",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'MixinConfigs'          : 'creatures-and-beasts.mixins.json'
        ])
    }

    classifier 'base'
}

jar.finalizedBy('reobfJar')

tasks.build.dependsOn shadowJar
tasks.build.dependsOn reobfShadowJar

//This minifies the jsons, which makes the end jar smaller. 
processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

